version: "3.9"

networks:
  net:
    external: false
    driver: bridge
  services:
    external: false
    driver: bridge

services:
  plex:
    container_name: plex
    image: ghcr.io/linuxserver/plex:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    network_mode: host
    volumes:
      - $CONFIGDIR/plex:/config:rw
      - $PLEXMEDIA:/data/media:rw
      - $CONFIGDIR/plex/tmp:/transcode:rw
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.$DOMAIN_NAME`, `plex.$LOCAL_DOMAIN`)"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - 'traefik.http.routers.plex.entrypoints=https'
      - 'traefik.http.routers.plex.tls=true'
      - 'traefik.http.routers.plex.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.plex.middlewares=authelia@docker'

  prowlarr:
    container_name: prowlarr
    image: ghcr.io/linuxserver/prowlarr:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/prowlarr:/config
    expose:
      - 9696
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.$DOMAIN_NAME`, `prowlarr.$LOCAL_DOMAIN`)"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      - 'traefik.http.routers.prowlarr.entrypoints=https'
      - 'traefik.http.routers.prowlarr.tls=true'
      - 'traefik.http.routers.prowlarr.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.prowlarr.middlewares=authelia@docker'

  radarr:
    container_name: radarr
    image: ghcr.io/linuxserver/radarr:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=022
    volumes:
      - $CONFIGDIR/radarr:/config
      - $MEDIADIR:/media
    expose:
      - 7878
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.$DOMAIN_NAME`, `radarr.$LOCAL_DOMAIN`)"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      - 'traefik.http.routers.radarr.entrypoints=https'
      - 'traefik.http.routers.radarr.tls=true'
      - 'traefik.http.routers.radarr.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.radarr.middlewares=authelia@docker'

  sonarr:
    container_name: sonarr
    image: ghcr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=022
    volumes:
      - $CONFIGDIR/sonarr:/config
      - $MEDIADIR:/media
    expose:
      - 8989
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.$DOMAIN_NAME`, `sonarr.$LOCAL_DOMAIN`)"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      - 'traefik.http.routers.sonarr.entrypoints=https'
      - 'traefik.http.routers.sonarr.tls=true'
      - 'traefik.http.routers.sonarr.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.sonarr.middlewares=authelia@docker'

  bazarr:
    container_name: bazarr
    image: ghcr.io/linuxserver/bazarr:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/bazarr:/config
      - $MEDIADIR/libraries/movies:/movies
      - $MEDIADIR/libraries/tv:/tv
      - $MEDIADIR/libraries/anime:/anime
    expose:
      - 6767
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.$DOMAIN_NAME`, `bazarr.$LOCAL_DOMAIN`)"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
      - 'traefik.http.routers.bazarr.entrypoints=https'
      - 'traefik.http.routers.bazarr.tls=true'
      - 'traefik.http.routers.bazarr.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.bazarr.middlewares=authelia@docker'

  overseerr:
    container_name: overseerr
    image: ghcr.io/linuxserver/overseerr:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/overseerr:/config
    expose:
      - 5055
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.$DOMAIN_NAME`, `overseerr.$LOCAL_DOMAIN`)"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"
      - 'traefik.http.routers.overseer.entrypoints=https'
      - 'traefik.http.routers.overseer.tls=true'
      - 'traefik.http.routers.overseer.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.overseer.middlewares=authelia@docker'

  tautulli:
    container_name: tautulli
    image: ghcr.io/linuxserver/tautulli:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=002
      - DEBUG=no
    volumes:
      - $CONFIGDIR/tautulli:/config
    expose:
      - 8181
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.$DOMAIN_NAME`, `tautulli.$LOCAL_DOMAIN`)"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"
      - 'traefik.http.routers.tautulli.entrypoints=https'
      - 'traefik.http.routers.tautulli.tls=true'
      - 'traefik.http.routers.tautulli.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.tautulli.middlewares=authelia@docker'

  organizr:
    container_name: organizr
    image: organizr/organizr:latest
    restart: unless-stopped
    networks:
      - net
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/organizr:/config
    expose:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.organizr.rule=Host(`organizr.$DOMAIN_NAME`, `organizr.$LOCAL_DOMAIN`)"
      - "traefik.http.services.organizr.loadbalancer.server.port=80"
      - 'traefik.http.routers.organizr.entrypoints=https'
      - 'traefik.http.routers.organizr.tls=true'
      - 'traefik.http.routers.organizr.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.organizr.middlewares=authelia@docker'

  vpn:
    container_name: GlueTun-Nord
    image: qmcgaw/gluetun:latest
    restart: unless-stopped
    networks:
      - net
    cap_add:
      - NET_ADMIN
    expose:
      - 8191
    ports:
      - "8112:8112"
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - VPN_SERVICE_PROVIDER=$VPN_SERVICE_PROVIDER
      - OPENVPN_USER=$OPENVPN_USER
      - OPENVPN_PASSWORD=$OPENVPN_PASSWORD
      - SERVER_REGIONS=$SERVER_REGIONS
      - COUNTRY=$SERVER_REGIONS
      - VPN_TYPE=$VPN_TYPE
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deluge.rule=Host(`deluge.$DOMAIN_NAME`, `deluge.$LOCAL_DOMAIN`)"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"
      - "traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.$DOMAIN_NAME`, `flaresolverr.$LOCAL_DOMAIN`)"
      - "traefik.http.services.flaresolverr.loadbalancer.server.port=8191"
      - 'traefik.http.routers.deluge.entrypoints=https'
      - 'traefik.http.routers.deluge.tls=true'
      - 'traefik.http.routers.deluge.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.deluge.middlewares=authelia@docker'
      - 'traefik.http.routers.flaresolverr.entrypoints=https'
      - 'traefik.http.routers.flaresolverr.tls=true'
      - 'traefik.http.routers.flaresolverr.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.flaresolverr.middlewares=authelia@docker'

  deluge:
    container_name: deluge
    image: ghcr.io/linuxserver/deluge:latest
    restart: unless-stopped
    network_mode: "service:vpn"
    environment:
      - WEBUI_PORT=8112
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $MEDIADIR/downloads:/downloads
      - $CONFIGDIR/deluge:/config

  flaresolverr:
    container_name: flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest
    restart: unless-stopped
    network_mode: "service:vpn"
    environment:
      - TZ=$TZ
      - LOG_HTML=${LOG_HTML:-false}
      - HOST=${HOST:-0.0.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-None}
      - HEADLESS=${HEADLESS:-true}

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    networks:
      - services
    volumes:
      - $CONFIGDIR/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=$TZ
    expose:
      - 9000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.$DOMAIN_NAME`, `portainer.$LOCAL_DOMAIN`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - 'traefik.http.routers.portainer.entrypoints=https'
      - 'traefik.http.routers.portainer.tls=true'
      - 'traefik.http.routers.portainer.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.portainer.middlewares=authelia@docker'

  netdata:
    container_name: netdata
    image: netdata/netdata:latest
    restart: unless-stopped
    networks:
      - services
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - $CONFIGDIR/netdata/netdataconfig:/etc/netdata
      - $CONFIGDIR/netdata/netdatalib:/var/lib/netdata
      - $CONFIGDIR/netdata/netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    expose:
      - 19999
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netdata.rule=Host(`netdata.$DOMAIN_NAME`, `netdata.$LOCAL_DOMAIN`)"
      - "traefik.http.services.netdata.loadbalancer.server.port=19999"
      - 'traefik.http.routers.netdata.entrypoints=https'
      - 'traefik.http.routers.netdata.tls=true'
      - 'traefik.http.routers.netdata.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.netdata.middlewares=authelia@docker'

  traefik:
    image: traefik:v2.10.4
    container_name: traefik
    depends_on:
      - authelia
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_API_EMAIL
      - CF_DNS_API_TOKEN=$CLOUDFLARE_DNS_API_TOKEN
      - CF_ZONE_API_TOKEN=$CLOUDFLARE_ZONE_API_TOKEN
    volumes:
      - $CONFIGDIR/traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - net
      - services
    labels:
      - 'traefik.enable=true'
      - "traefik.http.routers.api.rule=Host(`api.$DOMAIN_NAME`, `api.$LOCAL_DOMAIN`)"
      - 'traefik.http.routers.api.entrypoints=https'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.routers.api.tls=true'
      - 'traefik.http.routers.api.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.api.middlewares=authelia@docker'
    ports:
      - '8080:8080'
      - '80:80'
      - '443:443'
    command:
      - '--api'
      - '--api.dashboard=true'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--entrypoints.http=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.http.http.redirections.entrypoint.to=https'
      - '--entrypoints.http.http.redirections.entrypoint.scheme=https'
      - '--entrypoints.https=true'
      - '--entrypoints.https.address=:443'
      - '--certificatesResolvers.letsencrypt.acme.email=$MY_EMAIL'
      - '--certificatesResolvers.letsencrypt.acme.storage=$CONFIGDIR/traefik/acme.json'
      - '--certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint=http'
      - ' --certificatesResolvers.letsencrypt.acme.dnsChallenge=true'
      - '--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare'
      - '--log=true'
      - '--log.level=INFO'
    restart: unless-stopped

  authelia:
    image: authelia/authelia
    container_name: authelia
    volumes:
      - $CONFIGDIR/authelia:/config
      - $CONFIGDIR/authelia/users_database.yml:/app/users_database.yml
    networks:
      - net
      - services
    labels:
      - 'traefik.enable=true'
      - "traefik.http.routers.authelia.rule=Host(`authelia.$DOMAIN_NAME`, `authelia.$LOCAL_DOMAIN`)"
      - 'traefik.http.routers.authelia.entrypoints=https'
      - 'traefik.http.routers.authelia.tls=true'
      - 'traefik.http.routers.authelia.tls.certresolver=letsencrypt'
      - 'traefik.http.middlewares.authelia.forwardAuth.address=http://authelia:9091/api/verify?rd=https%3A%2F%2Fauthelia.docker.localhost%2F'
      - 'traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
    expose:
      - 9091
    restart: unless-stopped
    environment:
      - TZ=$TZ

  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - $CONFIGDIR/redis:/data
    networks:
      - net
    expose:
      - 6379
    restart: unless-stopped
    environment:
      - TZ=$TZ

  cloudflare-ddns:
    image: oznu/cloudflare-ddns
    restart: unless-stopped
    container_name: cloudflare
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - API_KEY=$CLOUDFLARE_DNS_API_TOKEN
      - ZONE=$DOMAIN_NAME
      - PROXIED=true

  cloudflare-companion:
    image: tiredofit/traefik-cloudflare-companion
    restart: unless-stopped
    container_name: cloudflare-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - TRAEFIK_VERSION=2
      - CF_EMAIL=$CLOUDFLARE_API_EMAIL
      - CF_TOKEN=$CLOUDFLARE_DNS_API_TOKEN
      - TARGET_DOMAIN=$DOMAIN_NAME
      - DOMAIN1=$DOMAIN_NAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONE_API_TOKEN
      - DOMAIN1_PROXIED=TRUE

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    networks:
      - services
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * 0
      - WATCHTOWER_DEBUG=False
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=$SMTP_SECRET
