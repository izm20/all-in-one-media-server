version: "3.9"

services:
  plex:
    container_name: plex
    image: linuxserver/plex:latest
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/plex:/config
      - $PLEXMEDIA:/data/media
      - $CONFIGDIR/plex/tmp:/transcode
    ports:
      - 32400:32400
    labels:
      traefik.enable: true
      traefik.http.routers.plex.rule: Host(`plex.$DOMAIN_NAME`, `plex.docker.localhost`)
      traefik.http.services.plex.loadbalancer.server.port: 32400
      traefik.http.routers.plex.middlewares: traefik-forward-auth 
      traefik.http.routers.plex.entrypoints: https
      traefik.http.routers.plex.tls: true
      traefik.http.routers.plex.tls.certresolver: le

  prowlarr:
    container_name: prowlarr
    image: linuxserver/prowlarr:latest
    restart: unless-stopped
    environment:
      - PUID=$UID
      - PGID=$GID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/prowlarr:/config
    ports:
      - 9696:9696
    labels:
      traefik.enable: true
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.$DOMAIN_NAME`, `prowlarr.docker.localhost`)
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr.middlewares: traefik-forward-auth 
      traefik.http.routers.prowlarr.entrypoints: https
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.tls.certresolver: le

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: unless-stopped
    environment:
      - PUID=$UID
      - PGID=$GID
      - TZ=$TZ
      - UMASK=022
    volumes:
      - $CONFIGDIR/radarr:/config
      - $PLEXMEDIA:/media
      - $MEDIADIR/downloads/complete:/downloads
    ports:
      - "7878:7878"
    labels:
      traefik.enable: true
      traefik.http.routers.radarr.rule: Host(`radarr.$DOMAIN_NAME`, `radarr.docker.localhost`)
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      traefik.http.routers.radarr.middlewares: traefik-forward-auth 
      traefik.http.routers.radarr.entrypoints: https
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certresolver: le

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    restart: unless-stopped
    environment:
      - PUID=$UID
      - PGID=$GID
      - TZ=$TZ
      - UMASK=022
    volumes:
      - $CONFIGDIR/sonarr:/config
      - $PLEXMEDIA:/media
      - $MEDIADIR/downloads/complete:/downloads
    ports:
      - "8989:8989"
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.rule: Host(`sonarr.$DOMAIN_NAME`, `sonarr.docker.localhost`)
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr.middlewares: traefik-forward-auth 
      traefik.http.routers.sonarr.entrypoints: https
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certresolver: le

  bazarr:
    container_name: bazarr
    image: linuxserver/bazarr:latest
    restart: unless-stopped
    environment:
      - PUID=$UID
      - PGID=$GID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/bazarr:/config
      - $MEDIADIR/libraries/movies:/movies
      - $MEDIADIR/libraries/tv:/tv
      - $MEDIADIR/libraries/anime:/anime
    ports:
      - "6767:6767"
    labels:
      traefik.enable: true
      traefik.http.routers.bazarr.rule: Host(`bazarr.$DOMAIN_NAME`, `bazarr.docker.localhost`)
      traefik.http.services.bazarr.loadbalancer.server.port: 6767
      traefik.http.routers.bazarr.middlewares: traefik-forward-auth 
      traefik.http.routers.bazarr.entrypoints: https
      traefik.http.routers.bazarr.tls: true
      traefik.http.routers.bazarr.tls.certresolver: le

  overseerr:
    container_name: overseerr
    image: linuxserver/overseerr:latest
    restart: unless-stopped
    environment:
      - PUID=$UID
      - PGID=$GID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/overseerr:/config
    ports:
      - "5055:5055"
    labels:
      traefik.enable: true
      traefik.http.routers.overseerr.rule: Host(`overseerr.$DOMAIN_NAME`, `overseerr.docker.localhost`)
      traefik.http.services.overseerr.loadbalancer.server.port: 5055
      traefik.http.routers.overseerr.middlewares: traefik-forward-auth 
      traefik.http.routers.overseerr.entrypoints: https
      traefik.http.routers.overseerr.tls: true
      traefik.http.routers.overseerr.tls.certresolver: le

  tautulli:
    container_name: tautulli
    image: linuxserver/tautulli:latest
    restart: unless-stopped
    environment:
      - PUID=$UID
      - PGID=$GID
      - TZ=$TZ
      - UMASK=002
      - DEBUG=no
    volumes:
      - $CONFIGDIR/tautulli:/config
    ports:
      - "8181:8181"
    labels:
      traefik.enable: true
      traefik.http.routers.tautulli.rule: Host(`tautulli.$DOMAIN_NAME`, `tautulli.docker.localhost`)
      traefik.http.services.tautulli.loadbalancer.server.port: 8181
      traefik.http.routers.tautulli.middlewares: traefik-forward-auth 
      traefik.http.routers.tautulli.entrypoints: https
      traefik.http.routers.tautulli.tls: true
      traefik.http.routers.tautulli.tls.certresolver: le

  vpn:
    container_name: GlueTun-Nord
    image: qmcgaw/gluetun:latest
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "8191:8191"
      - "8988:8988"
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - VPN_SERVICE_PROVIDER=$VPN_SERVICE_PROVIDER
      - OPENVPN_USER=$OPENVPN_USER
      - OPENVPN_PASSWORD=$OPENVPN_PASSWORD
      - SERVER_REGIONS=$SERVER_REGIONS
      - COUNTRY=$SERVER_REGIONS
      - VPN_TYPE=$VPN_TYPE
      - TZ=$TZ
    labels:
      traefik.enable: true
      traefik.http.routers.torrent.rule: Host(`torrent.$DOMAIN_NAME`, `torrent.docker.localhost`)
      traefik.http.services.torrent.loadbalancer.server.port: 8988
      traefik.http.routers.torrent.middlewares: traefik-forward-auth 
      traefik.http.routers.torrent.entrypoints: https
      traefik.http.routers.torrent.tls: true
      traefik.http.routers.torrent.tls.certresolver: le

  qbittorrent:
    container_name: qbittorrent
    image: linuxserver/qbittorrent:latest
    restart: unless-stopped
    network_mode: "service:vpn"
    environment:
      - PUID=$UID
      - PGID=$GID
      - TZ=$TZ
      - WEBUI_PORT=8988
    volumes:
      - $MEDIADIR/downloads:/downloads
      - $CONFIGDIR/qbittorrent:/config

  flaresolverr:
    container_name: flaresolverr
    image: flaresolverr/flaresolverr:latest
    restart: unless-stopped
    network_mode: "service:vpn"
    environment:
      - TZ=$TZ
      - LOG_HTML=${LOG_HTML:-false}
      - HOST=${HOST:-0.0.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-None}
      - HEADLESS=${HEADLESS:-true}

  homarr:
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    hostname: homarr
    container_name: homarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - $CONFIGDIR/homarr/configs:/app/data/configs
      - $CONFIGDIR/homarr/icons:/app/public/icons
      - $CONFIGDIR/homarr/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 7575:7575
    labels:
      traefik.enable: true
      traefik.http.routers.homarr.rule: Host(`$DOMAIN_NAME`, `docker.localhost`)
      traefik.http.services.homarr.loadbalancer.server.port: 7575
      traefik.http.routers.homarr.middlewares: traefik-forward-auth
      traefik.http.routers.homarr.entrypoints: https
      traefik.http.routers.homarr.tls: true
      traefik.http.routers.homarr.tls.certresolver: le

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    volumes:
      - $CONFIGDIR/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=$TZ
    ports:
      - 9050:9000
      - 8000:8000
    labels:      
      traefik.enable: true
      traefik.http.routers.portainer.rule: Host(`portainer.$DOMAIN_NAME`, `portainer.docker.localhost`)
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      traefik.http.routers.portainer.middlewares: traefik-forward-auth 
      traefik.http.routers.portainer.entrypoints: https
      traefik.http.routers.portainer.tls: true
      traefik.http.routers.portainer.tls.certresolver: le

  netdata:
    container_name: netdata
    image: netdata/netdata:latest
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - $CONFIGDIR/netdata/netdataconfig:/etc/netdata
      - $CONFIGDIR/netdata/netdatalib:/var/lib/netdata
      - $CONFIGDIR/netdata/netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "19999:19999"
    labels:      
      traefik.enable: true
      traefik.http.routers.netdata.rule: Host(`netdata.$DOMAIN_NAME`, `netdata.docker.localhost`)
      traefik.http.services.netdata.loadbalancer.server.port: 19999
      traefik.http.routers.netdata.middlewares: traefik-forward-auth 
      traefik.http.routers.netdata.entrypoints: https
      traefik.http.routers.netdata.tls: true
      traefik.http.routers.netdata.tls.certresolver: le

  dash:
    container_name: dash
    image: mauricenino/dashdot:latest
    restart: unless-stopped
    privileged: true
    ports:
      - '3001:3001'
    volumes:
      - /:/mnt/host:ro
    labels:
      traefik.enable: true
      traefik.http.routers.dash.rule: Host(`dash.$DOMAIN_NAME`, `dash.docker.localhost`)
      traefik.http.services.dash.loadbalancer.server.port: 3001
      traefik.http.routers.dash.middlewares: traefik-forward-auth 
      traefik.http.routers.dash.entrypoints: https
      traefik.http.routers.dash.tls: true
      traefik.http.routers.dash.tls.certresolver: le

  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - --api.insecure=true
      - --log.level=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --entrypoints.http=true
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entrypoint.to=https
      - --entrypoints.http.http.redirections.entrypoint.scheme=https
      - --entrypoints.https=true
      - --entrypoints.https.address=:443
      - --api=true
      - --api.dashboard=true
      - --certificatesResolvers.le.acme.dnsChallenge=true
      - --certificatesResolvers.le.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.le.acme.email=${CLOUDFLARE_API_EMAIL}
      - --certificatesresolvers.le.acme.storage=acme.json
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"    
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_API_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`traefik.$DOMAIN_NAME`, `traefik.docker.localhost`)
      traefik.http.routers.traefik.service: api@internal    
      traefik.http.routers.traefik.middlewares: traefik-forward-auth 
      traefik.http.routers.traefik.entrypoints: https
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: le

  cloudflare-ddns:
    image: oznu/cloudflare-ddns
    restart: unless-stopped
    container_name: cloudflare
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - API_KEY=$CLOUDFLARE_DNS_API_TOKEN
      - ZONE=$DOMAIN_NAME
      - PROXIED=true

  cloudflare-companion:
    image: tiredofit/traefik-cloudflare-companion
    restart: unless-stopped
    container_name: cloudflare-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - TRAEFIK_VERSION=2
      - CF_EMAIL=$CLOUDFLARE_API_EMAIL
      - CF_TOKEN=$CLOUDFLARE_API
      - TARGET_DOMAIN=$DOMAIN_NAME
      - DOMAIN1=$DOMAIN_NAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONE_API_TOKEN
      - DOMAIN1_PROXIED=TRUE

  oauth:
    container_name: oauth
    restart: unless-stopped
    image: thomseddon/traefik-forward-auth:2.1-arm64
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SECRET=${OAUTH_SECRET}
      - INSECURE_COOKIE=true
      - AUTH_HOST=oauth.${DOMAIN_NAME}
      - URL_PATH=/_oauth
      - LIFETIME=86400      
      - COOKIE_DOMAIN=${DOMAIN_NAME}
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
      - LOG_LEVEL=trace
    security_opt:
      - no-new-privileges:true    
    command: 
      --whitelist=${MY_EMAIL}
    labels:
      traefik.enable: true
      traefik.http.middlewares.traefik-forward-auth.forwardauth.address: http://oauth:4181
      traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders: X-Forwarded-User      
      traefik.http.middlewares.traefik-no-auth.chain.middlewares:
      traefik.http.services.oauth.loadbalancer.server.port: 4181
      traefik.http.routers.oauth.rule: Host(`oauth.$DOMAIN_NAME`, `oauth.docker.localhost`)
      traefik.http.routers.oauth.middlewares: traefik-forward-auth
      traefik.http.routers.oauth.entrypoints: https
      traefik.http.routers.oauth.tls: true
      traefik.http.routers.oauth.tls.certresolver: le

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * 0
      - WATCHTOWER_DEBUG=False
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=$SMTP_SECRET
