version: "3.8"

services:
  plex:
    container_name: plex
    image: ghcr.io/linuxserver/plex:latest
    restart: unless-stopped
    environment:
      - PUID=$PLEX_PUID
      - PGID=$PLEX_PGID
      - TZ=$TZ
    network_mode: host
    volumes:
      - $CONFIGDIR/plex:/config:rw
      - $PLEXMEDIA:/data/media:rw
      - $CONFIGDIR/plex/tmp:/transcode:rw
    labels:
      traefik.http.routers.plex.rule: Host(`plex.$DOMAIN_NAME`, `plex.localhost`)
      traefik.http.services.plex.loadbalancer.server.port: 32400
      traefik.http.routers.plex.middlewares: traefik-forward-auth

  prowlarr:
    container_name: prowlarr
    image: ghcr.io/linuxserver/prowlarr:latest
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/prowlarr:/config
    ports:
      - "9696:9696"
    labels:
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.$DOMAIN_NAME`, `prowlarr.localhost`)
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr.middlewares: traefik-forward-auth

  radarr:
    container_name: radarr
    image: ghcr.io/linuxserver/radarr:latest
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=022
    volumes:
      - $CONFIGDIR/radarr:/config
      - $MEDIADIR:/media
    ports:
      - "7878:7878"
    labels:
      traefik.http.routers.radarr.rule: Host(`radarr.$DOMAIN_NAME`, `radarr.localhost`)
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      traefik.http.routers.radarr.middlewares: traefik-forward-auth

  sonarr:
    container_name: sonarr
    image: ghcr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=022
    volumes:
      - $CONFIGDIR/sonarr:/config
      - $MEDIADIR:/media
    ports:
      - "8989:8989"
    labels:
      traefik.http.routers.sonarr.rule: Host(`sonarr.$DOMAIN_NAME`, `sonarr.localhost`)
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr.middlewares: traefik-forward-auth

  bazarr:
    container_name: bazarr
    image: ghcr.io/linuxserver/bazarr:latest
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/bazarr:/config
      - $MEDIADIR/libraries/movies:/movies
      - $MEDIADIR/libraries/tv:/tv
      - $MEDIADIR/libraries/anime:/anime
    ports:
      - "6767:6767"
    labels:
      traefik.http.routers.bazarr.rule: Host(`bazarr.$DOMAIN_NAME`, `bazarr.localhost`)
      traefik.http.services.bazarr.loadbalancer.server.port: 6767
      traefik.http.routers.bazarr.middlewares: traefik-forward-auth

  overseerr:
    container_name: overseerr
    image: ghcr.io/linuxserver/overseerr:latest
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/overseerr:/config
    ports:
      - "5055:5055"
    labels:
      traefik.http.routers.overseerr.rule: Host(`overseerr.$DOMAIN_NAME`, `overseerr.localhost`)
      traefik.http.services.overseerr.loadbalancer.server.port: 5055
      traefik.http.routers.overseerr.middlewares: traefik-forward-auth

  tautulli:
    container_name: tautulli
    image: ghcr.io/linuxserver/tautulli:latest
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=002
      - DEBUG=no
    volumes:
      - $CONFIGDIR/tautulli:/config
    ports:
      - "8181:8181"
    labels:
      traefik.http.routers.tautulli.rule: Host(`tautulli.$DOMAIN_NAME`, `tautulli.localhost`)
      traefik.http.services.tautulli.loadbalancer.server.port: 8181
      traefik.http.routers.tautulli.middlewares: traefik-forward-auth

  organizr:
    container_name: organizr
    image: organizr/organizr:latest
    restart: unless-stopped
    environment:
      - PUID=$ORGANIZR_PUID
      - PGID=$ORGANIZR_PGID
      - TZ=$TZ
    volumes:
      - $CONFIGDIR/organizr:/config
    ports:
      - "9983:80"
    labels:
      traefik.http.routers.organizr.rule: Host(`organizr.$DOMAIN_NAME`, `organizr.localhost`)
      traefik.http.services.organizr.loadbalancer.server.port: 9983
      traefik.http.routers.organizr.middlewares: traefik-forward-auth

  vpn:
    container_name: GlueTun-Nord
    image: qmcgaw/gluetun:latest
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "8191:8191"
      - "8112:8112"
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - VPN_SERVICE_PROVIDER=$VPN_SERVICE_PROVIDER
      - OPENVPN_USER=$OPENVPN_USER
      - OPENVPN_PASSWORD=$OPENVPN_PASSWORD
      - SERVER_REGIONS=$SERVER_REGIONS
      - COUNTRY=$SERVER_REGIONS
      - VPN_TYPE=$VPN_TYPE
      - TZ=$TZ
    labels:
      traefik.http.routers.deluge.rule: Host(`deluge.$DOMAIN_NAME`, `deluge.localhost`)
      traefik.http.services.deluge.loadbalancer.server.port: 8112
      traefik.http.routers.deluge.middlewares: traefik-forward-auth
      traefik.http.routers.flaresolverr.rule: Host(`flaresolverr.$DOMAIN_NAME`, `flaresolverr.localhost`)
      traefik.http.services.flaresolverr.loadbalancer.server.port: 8191
      traefik.http.routers.flaresolverr.middlewares: traefik-forward-auth

  deluge:
    container_name: deluge
    image: ghcr.io/linuxserver/deluge:latest
    restart: unless-stopped
    network_mode: "service:vpn"
    environment:
      - WEBUI_PORT=8112
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $MEDIADIR/downloads:/downloads
      - $CONFIGDIR/deluge:/config
    labels:
      traefik.http.routers.deluge.service: deluge


  flaresolverr:
    container_name: flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest
    restart: unless-stopped
    network_mode: "service:vpn"
    environment:
      - TZ=$TZ
      - LOG_HTML=${LOG_HTML:-false}
      - HOST=${HOST:-0.0.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-None}
      - HEADLESS=${HEADLESS:-true}
    labels:
      traefik.http.routers.flaresolverr.service: flaresolverr

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    volumes:
      - $CONFIGDIR/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=$TZ
    ports:
      - "9000:9000"
    labels:
      traefik.http.routers.portainer.rule: Host(`portainer.$DOMAIN_NAME`, `portainer.localhost`)
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      traefik.http.routers.portainer.middlewares: traefik-forward-auth

  netdata:
    container_name: netdata
    image: netdata/netdata:latest
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - $CONFIGDIR/netdata/netdataconfig:/etc/netdata
      - $CONFIGDIR/netdata/netdatalib:/var/lib/netdata
      - $CONFIGDIR/netdata/netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "19999:19999"
    labels:
      traefik.http.routers.netdata.rule: Host(`netdata.$DOMAIN_NAME`, `netdata.localhost`)
      traefik.http.services.netdata.loadbalancer.server.port: 19999
      traefik.http.routers.netdata.middlewares: traefik-forward-auth

  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - --log.level=INFO
      #- --api.insecure=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443 #Declares the web-secure entrypoint in Traefik
      - --providers.docker=true
      - --api=true
      - --api.dashboard=true
      - --certificatesResolvers.le.acme.dnsChallenge=true
      - --certificatesResolvers.le.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.le.acme.email=${MY_EMAIL}
      - --certificatesresolvers.le.acme.storage=acme.json
    restart: unless-stopped
    ports:
      - "80:80"
      - "8084:8080"
      - "443:443" #Docker sends requests on port 443 to Traefik on port 443
    environment:
      - CF_API_EMAIL=${MY_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_TLS}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      traefik.http.routers.dash.rule: Host(`dash.$DOMAIN_NAME`, `dash.localhost`)
      traefik.http.routers.dash.service: api@internal
      traefik.http.routers.dash.middlewares: traefik-forward-auth

  cloudflare-ddns:
    image: oznu/cloudflare-ddns
    restart: unless-stopped
    container_name: cloudflare
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
      - API_KEY=${CLOUDFLARE_API}
      - ZONE=${DOMAIN_NAME}
      - PROXIED=true
    ports:
     - 8085:80

  cloudflare-companion:
    image: tiredofit/traefik-cloudflare-companion
    restart: unless-stopped
    container_name: cloudflare-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
      - TRAEFIK_VERSION=2
      - CF_TOKEN=${CLOUDFLARE_API}
      - TARGET_DOMAIN=${DOMAIN_NAME}
      - DOMAIN1=${DOMAIN_NAME}
      - DOMAIN1_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - DOMAIN1_PROXIED=TRUE

  oauth:
    container_name: oauth
    restart: unless-stopped
    image: thomseddon/traefik-forward-auth:2.2.0-arm
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SECRET=${OAUTH_SECRET}
      - INSECURE_COOKIE=true # Example assumes no https, do not use in production
      - AUTH_HOST=oauth.${DOMAIN_NAME}
      - URL_PATH=/_oauth
      - LIFETIME=86400 # 1 day
      - COOKIE_DOMAIN=${DOMAIN_NAME}
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
      - LOG_LEVEL=trace
    security_opt:
      - no-new-privileges:true
    command:
      --rule.torrent.action=allow --rule.torrent.rule="(Host(`torrent.$DOMAIN_NAME`) && PathPrefix(`/api`)) || Host(`torrent.localhost`)"
      --rule.sonarr.action=allow --rule.sonarr.rule="(Host(`sonarr.$DOMAIN_NAME`) && PathPrefix(`/api`)) || Host(`sonarr.localhost`)"
      --rule.bazarr.action=allow --rule.bazarr.rule="(Host(`bazarr.$DOMAIN_NAME`) && PathPrefix(`/api`)) || Host(`bazarr.localhost`)"
      --rule.radarr.action=allow --rule.radarr.rule="(Host(`radarr.$DOMAIN_NAME`) && PathPrefix(`/api`)) || Host(`radarr.localhost`)"
      --rule.portainer.action=allow --rule.portainer.rule="Host(`portainer.localhost`)"
      --rule.traefik.action=allow --rule.traefik.rule="Host(`dash.localhost`)"
      --whitelist=${MY_EMAIL}
    labels:
      traefik.http.middlewares.traefik-forward-auth.forwardauth.address: http://oauth:4181
      traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders: X-Forwarded-User
      traefik.http.middlewares.traefik-no-auth.chain.middlewares:
      traefik.http.services.oauth.loadbalancer.server.port: 4181
      traefik.http.routers.oauth.rule: Host(`oauth.$DOMAIN_NAME`)
      traefik.http.routers.oauth.middlewares: traefik-forward-auth

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * 0
      - WATCHTOWER_DEBUG=False
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=$SMTP_SECRET
